From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 22 Aug 2020 22:30:00 +0200
Subject: [PATCH 1/1] Implement mmap and msync for NODERAWFS

Upstream-Status: Accepted [https://github.com/emscripten-core/emscripten/commit/0320c041834ed4043d2a29e8cf1d7b08b011aab5]

diff --git a/src/library_memfs.js b/src/library_memfs.js
index 1111111..2222222 100644
--- a/src/library_memfs.js
+++ b/src/library_memfs.js
@@ -348,9 +348,10 @@ mergeInto(LibraryManager.library, {
         stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
       },
       mmap: function(stream, address, length, position, prot, flags) {
-        // We don't currently support location hints for the address of the mapping
-        assert(address === 0);
-
+        if (address !== 0) {
+          // We don't currently support location hints for the address of the mapping
+          throw new FS.ErrnoError({{{ cDefine('EINVAL') }}});
+        }
         if (!FS.isFile(stream.node.mode)) {
           throw new FS.ErrnoError({{{ cDefine('ENODEV') }}});
         }
diff --git a/src/library_nodefs.js b/src/library_nodefs.js
index 1111111..2222222 100644
--- a/src/library_nodefs.js
+++ b/src/library_nodefs.js
@@ -296,9 +296,10 @@ mergeInto(LibraryManager.library, {
         return position;
       },
       mmap: function(stream, address, length, position, prot, flags) {
-        // We don't currently support location hints for the address of the mapping
-        assert(address === 0);
-
+        if (address !== 0) {
+          // We don't currently support location hints for the address of the mapping
+          throw new FS.ErrnoError({{{ cDefine('EINVAL') }}});
+        }
         if (!FS.isFile(stream.node.mode)) {
           throw new FS.ErrnoError({{{ cDefine('ENODEV') }}});
         }
diff --git a/src/library_noderawfs.js b/src/library_noderawfs.js
index 1111111..2222222 100644
--- a/src/library_noderawfs.js
+++ b/src/library_noderawfs.js
@@ -5,7 +5,7 @@
  */
 
 mergeInto(LibraryManager.library, {
-  $NODERAWFS__deps: ['$ERRNO_CODES', '$FS', '$NODEFS'],
+  $NODERAWFS__deps: ['$ERRNO_CODES', '$FS', '$NODEFS', '$mmapAlloc'],
   $NODERAWFS__postset: 'if (ENVIRONMENT_IS_NODE) {' +
     'var _wrapNodeError = function(func) { return function() { try { return func.apply(this, arguments) } catch (e) { if (!e.code) throw e; throw new FS.ErrnoError(ERRNO_CODES[e.code]); } } };' +
     'var VFS = Object.assign({}, FS);' +
@@ -122,10 +122,31 @@ mergeInto(LibraryManager.library, {
     allocate: function() {
       throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
     },
-    mmap: function() {
-      throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
+    mmap: function(stream, address, length, position, prot, flags) {
+      if (stream.stream_ops) {
+        // this stream is created by in-memory filesystem
+        return VFS.mmap(stream, address, length, position, prot, flags);
+      }
+      if (address !== 0) {
+        // We don't currently support location hints for the address of the mapping
+        throw new FS.ErrnoError({{{ cDefine('EINVAL') }}});
+      }
+
+      var ptr = mmapAlloc(length);
+      FS.read(stream, HEAP8, ptr, length, position);
+      return { ptr: ptr, allocated: true };
     },
-    msync: function() {
+    msync: function(stream, buffer, offset, length, mmapFlags) {
+      if (stream.stream_ops) {
+        // this stream is created by in-memory filesystem
+        return VFS.msync(stream, buffer, offset, length, mmapFlags);
+      }
+      if (mmapFlags & {{{ cDefine('MAP_PRIVATE') }}}) {
+        // MAP_PRIVATE calls need not to be synced back to underlying fs
+        return 0;
+      }
+
+      FS.write(stream, buffer, 0, length, offset);
       return 0;
     },
     munmap: function() {
diff --git a/src/library_syscall.js b/src/library_syscall.js
index 1111111..2222222 100644
--- a/src/library_syscall.js
+++ b/src/library_syscall.js
@@ -279,10 +279,12 @@ var SyscallsLibrary = {
     if (len === info.len) {
 #if FILESYSTEM && SYSCALLS_REQUIRE_FILESYSTEM
       var stream = FS.getStream(info.fd);
-      if (info.prot & {{{ cDefine('PROT_WRITE') }}}) {
-        SYSCALLS.doMsync(addr, stream, len, info.flags, info.offset);
+      if (stream) {
+        if (info.prot & {{{ cDefine('PROT_WRITE') }}}) {
+          SYSCALLS.doMsync(addr, stream, len, info.flags, info.offset);
+        }
+        FS.munmap(stream);
       }
-      FS.munmap(stream);
 #else
 #if ASSERTIONS
       // Without FS support, only anonymous mappings are supported.
